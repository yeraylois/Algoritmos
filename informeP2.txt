┌───────────────────────────────────────────────────────────────────────────────┐
│                                   INTEGRANTES                                 │
├───────────────────────────────────────────────────────────────────────────────┤
│   Yeray Lois Sánchez  --> yeray.lois@udc.es                                   │
│   Anxo Galdo Blasco   --> anxo.galdo.blasco@udc.es                            │
│   Sofía Oubiña Falcon --> sofia.oubina.falcon@udc.es                          │
└───────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────────────┐
│                                 	INTRODUCCIÓN                        	│
└───────────────────────────────────────────────────────────────────────────────┘

En  este  estudio  se  analizan  empíricamente  los tiempos de ejecución de dos
algoritmos  de  ordenación  fundamentales  en  informática: 

	1. Ordenación Por Inserción 
	2. Ordenación Rápida (Quicksort).

El  objetivo  principal  es  determinar  la  complejidad  de  estos algoritmos  
en  función del número de elementos del vector a ordenar y evaluar cómo influye 
el estado inicial de los datos en su rendimiento.

Para lograr este objetivo, se realizarán mediciones precisas de los tiempos de
ejecución   (expresados  en  microsegundos)  variando  el tamaño  del  vector, 
permitiendo observar cómo escala el rendimiento de cada algoritmo con respecto 
al incremento  de  datos.  

Se  considerarán  tamaños desde pequeños conjuntos hasta volúmenes de datos más 
grandes para obtener una visión completa del comportamiento de los algoritmos.

Además,  se  utilizarán  tres tipos de inicialización del vector:

1.  Inicialización  aleatoria:  Los  elementos  del vector se asignan de forma
    aleatoria,  representando  un  caso común en aplicaciones prácticas donde
    los datos no tienen un orden específico.
    
2.  Inicialización  descendente:  El  vector se inicializa en orden decreciente.
    Este caso suele representar el peor escenario para ciertos algoritmos, ya
    que  requiere  el  máximo número de operaciones para ordenar los datos.

3.  Inicialización  ascendente: El vector se inicializa en orden creciente. Es-
    te  escenario  permite  observar  el rendimiento en el mejor de los casos
    para algunos algoritmos, como la ordenación por inserción, donde los datos
    ya están ordenados.
    
┌───────────────────────────────────────────────────────────────────────────────┐
│                                    MÁQUINA                                    │
├───────────────────────────────────────────────────────────────────────────────┤
│  Los tiempos de ejecución se han obtenido utilizando un MacBook Pro con       │
│  procesador Apple M3 Pro, 18 GB de memoria RAM, y sistema operativo           │
│  macOS Sonoma 14.6.1.          						│
└───────────────────────────────────────────────────────────────────────────────┘

┌───────────────────────────────────────────────────────────────────────────────┐
│                           TABLAS TIEMPOS DE EJECUCIÓN                		│
└───────────────────────────────────────────────────────────────────────────────┘
    ┌────────────────────────────────────────────────────────────────────────┐
    │			      Ordenación Por Inserción 			     │
    └────────────────────────────────────────────────────────────────────────┘
    
Ordenación por inserción con inicialización ALEATORIA
               n         t(n)(µs)     t(n)/n^1.8       t(n)/n^2       t(n)/n^2.2
(*)          500          81.074       0.0011239       0.0003243       0.0000936
(*)         1000         299.160       0.0011910       0.0002992       0.0000751
            2000        1172.000       0.0013399       0.0002930       0.0000641
            4000        4672.000       0.0015339       0.0002920       0.0000556
            8000       18002.000       0.0016973       0.0002813       0.0000466
           16000       73198.000       0.0019819       0.0002859       0.0000413
           32000      289319.000       0.0022496       0.0002825       0.0000355
				        
                                       n^1.8 es        n^2 es          n^2.2 es
                                       subestimada     ajustada        sobreestimada
                                                       cte = 0.000294

Ordenación por inserción con inicialización DESCENDENTE
               n         t(n)(µs)     t(n)/n^1.8       t(n)/n^2       t(n)/n^2.2
(*)          500         147.801       0.0020489       0.0005912       0.0001706
            1000         588.000       0.0023409       0.0005880       0.0001477
            2000        2301.000       0.0026306       0.0005753       0.0001258
            4000        9028.000       0.0029640       0.0005642       0.0001074
            8000       36315.000       0.0034239       0.0005674       0.0000940
           16000      145220.000       0.0039320       0.0005673       0.0000818
           32000      579031.000       0.0045023       0.0005655       0.0000710

                                       n^1.8 es        n^2 es          n^2.2 es
                                       subestimada     ajustada        sobreestimada
                                                       cte = 0.0005741

Ordenación por inserción con inicialización ASCENDENTE
               n         t(n)(µs)     t(n)/n^0.8         t(n)/n       t(n)/n^1.2
(*)          500           1.146       0.0079455       0.0022926       0.0006615
(*)         1000           1.972       0.0078511       0.0019721       0.0004954
(*)         2000           3.928       0.0089810       0.0019639       0.0004295
(*)         4000           7.760       0.0101904       0.0019399       0.0003693
(*)         8000          15.529       0.0117129       0.0019411       0.0003217
(*)        16000          28.637       0.0124062       0.0017898       0.0002582
(*)        32000          57.170       0.0142248       0.0017866       0.0002244
(*)        64000         123.507       0.0176501       0.0019298       0.0002110
(*)       128000         246.880       0.0202637       0.0019287       0.0001836
(*)       256000         477.928       0.0225305       0.0018669       0.0001547
          512000         908.000       0.0245850       0.0017734       0.0001279

                                       n^0.8 es        n es            n^1.2 es
                                       subestimada     ajustada        sobreestimada
                                                       cte = 0.0019259
   
    ┌────────────────────────────────────────────────────────────────────────┐
    │			      Ordenación Rápida 			     │
    └────────────────────────────────────────────────────────────────────────┘
	
Ordenación Rápida con inicialización ALEATORIA
               n         t(n)(µs)    t(n)/n^1.05      t(n)/n*log(n)   t(n)/n^1.25
(*)          500          24.802       0.0363546       0.0079817       0.0104898
(*)         1000          54.748       0.0387586       0.0079256       0.0097357
(*)         2000         116.552       0.0398510       0.0076670       0.0087143
(*)         4000         251.231       0.0414869       0.0075726       0.0078977
            8000         516.000       0.0411534       0.0071769       0.0068200
           16000        1041.000       0.0400982       0.0067211       0.0057850
           32000        2267.000       0.0421739       0.0068293       0.0052968
           64000        4895.000       0.0439809       0.0069113       0.0048087
          128000       10240.000       0.0444354       0.0068028       0.0042295
          256000       21980.000       0.0460655       0.0068947       0.0038170
          512000       45935.000       0.0464954       0.0068246       0.0033539

                                       n^1.05 es       n*log(n) es     n^1.25
                                       subestimada     ajustada        sobreestimada
                                                       cte = 0.00721

Ordenación rápida con inicialización DESCENDENTE
               n         t(n)(µs)   t(n)/n^1.005  t(n)/n^1.0435      t(n)/n^1.09
(*)          500           7.947       0.0154075       0.0121289       0.0090849
(*)         1000          16.466       0.0159075       0.0121927       0.0088430
(*)         2000          33.801       0.0162701       0.0121423       0.0085271
(*)         4000          69.444       0.0166557       0.0121027       0.0082298
(*)         8000         144.354       0.0172513       0.0122055       0.0080364
(*)        16000         300.111       0.0178707       0.0123107       0.0078486
           32000         634.000       0.0188111       0.0126173       0.0077889
           64000        1286.000       0.0190121       0.0124163       0.0074217
          128000        2671.000       0.0196756       0.0125112       0.0072413
          256000        5557.000       0.0203967       0.0126282       0.0070772
          512000       11493.000       0.0210192       0.0126710       0.0068759

                                      n^1.005 es      n^1.0435 es     n^1.09
                                       subestimada     ajustada        sobreestimada
                                                       cte = 0.01236

Ordenación Rápida con inicialización ASCENDENTE
               n         t(n)(µs)    t(n)/n^1.005     t(n)/n^1.0435    t(n)/n^1.09
(*)          500           5.739       0.0111266       0.0087590       0.0065607
(*)         1000          12.304       0.0118864       0.0091107       0.0066077
(*)         2000          26.269       0.0126447       0.0094367       0.0066271
(*)         4000          55.639       0.0133447       0.0096968       0.0065938
(*)         8000         120.093       0.0143520       0.0101542       0.0066858
(*)        16000         251.888       0.0149991       0.0103326       0.0065874
           32000         537.000       0.0159330       0.0106869       0.0065972
           64000        1032.000       0.0152570       0.0099639       0.0059558
          128000        2200.000       0.0162060       0.0103050       0.0059644
          256000        4553.000       0.0167115       0.0103466       0.0057985
          512000        9540.000       0.0174475       0.0105178       0.0057075

                                       n^1.005 es      n^1.0435 es     n^1.09
                                       subestimada     ajustada        sobreestimada
                                                       cte = 0.00994
      
(*): Tiempo promedio de 10000 ejecuciones del algortimo

┌───────────────────────────────────────────────────────────────────────────────┐
│                           	 CONCLUSIONES	                  		│
└───────────────────────────────────────────────────────────────────────────────┘

1. Ordenación Por Inserción:
   
   - Inicialización Aleatoria y Descendente: Se ajusta bien a la complejidad 
     teórica O(n^2). Los valores de t(n)/n^2 muestran consistencia a medida 
     que aumenta el tamaño del vector, lo cual refleja un incremento gradual 
     y sostenido en los tiempos de ejecución.
   
   - Inicialización Ascendente: El algoritmo funciona con una complejidad 
     cercana a O(n), como se puede observar en los valores significativamente 
     bajos de tiempo para los tamaños crecientes del vector. Este es el mejor 
     caso para el algoritmo, dado que los datos ya están ordenados.

2. Ordenación Rápida (Quicksort):
   
   - Inicialización Aleatoria: La complejidad medida se ajusta bien a 
     O(n*log(n)), confirmada por la estabilidad de las cotas ajustadas, lo que 
     indica que Quicksort maneja eficientemente vectores aleatorios, su caso 
     típico de uso.

   - Inicialización Descendente y Ascendente: Los resultados muestran un 
     comportamiento ligeramente peor, con una complejidad algo superior a 
     O(n*log(n)), pero aún dentro de márgenes aceptables. La razón probable 
     es que, en estos casos, el algoritmo necesita más tiempo para ordenar 
     los datos iniciales debido a su disposición.

3. Comparación entre Algoritmos:
   
   - Ordenación Por Inserción es más adecuada para vectores pequeños o 
     ya ordenados, como se puede ver en la inicialización ascendente.
   
   - Ordenación Rápida, por otro lado, ofrece un rendimiento significativamente 
     mejor en vectores de mayor tamaño y en condiciones más comunes como la 
     inicialización aleatoria, donde alcanza su mejor desempeño.
     
   - En general, Ordenación Rápida es el algoritmo más eficiente en la mayoría 
     de los casos prácticos debido a su complejidad O(n*log(n)).

      
      
